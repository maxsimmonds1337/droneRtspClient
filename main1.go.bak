package main1

import (
	"bufio"
	"fmt"
	"net"
	"os"
	"os/signal"
	"strings"
	"syscall"
)

var sessionID string

func main1() {
	rtspAddr := "192.168.201.1:7070"
	rtspURL := "rtsp://192.168.201.1/H264VideoSMS"

	logChan := make(chan string, 100)
	logChan <- "Connecting to RTSP stream..."

	rtspStream, err := net.Dial("tcp", rtspAddr)
	if err != nil {
		panic(err)
	}
	defer rtspStream.Close()
	logChan <- "Connection established!"

	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	commands := make(chan string)
	quit := make(chan struct{})

	// Goroutine: Handle SIGINT (Ctrl+C)
	go func() {
		sig := <-sigs
		logChan <- fmt.Sprintf("\nReceived signal: %s\n", sig)
		close(quit)
		os.Exit(0)
	}()

	go func() {
		for {
			logMsg := <-logChan
			fmt.Printf(logMsg)
		}
	}()

	// Goroutine: Send commands to RTSP server
	go func() {
		for {
			select {
			case cmd := <-commands:
				var req string
				switch strings.ToUpper(cmd) {
				case "OPTIONS":
					req = fmt.Sprintf("OPTIONS %s RTSP/1.0\r\nCSeq: 1\r\n\r\n", rtspURL)
				case "DESCRIBE":
					req = fmt.Sprintf("DESCRIBE %s RTSP/1.0\r\nCSeq: 2\r\nAccept: application/sdp\r\n\r\n", rtspURL)
				case "SETUP":
					req = fmt.Sprintf("SETUP %s RTSP/1.0\r\nCSeq: 3\r\nTransport: RTP/AVP;unicast;client_port=8000-8001\r\n\r\n", rtspURL)
				case "PLAY":
					req = fmt.Sprintf("PLAY %s RTSP/1.0\r\nCSeq: 4\r\nSession: %s\r\n\r\n", rtspURL, sessionID)
				default:
					logChan <- fmt.Sprintf("Unknown command: %s", cmd)
					continue
				}
				_, err := rtspStream.Write([]byte(req))
				if err != nil {
					logChan <- fmt.Sprintf("Write error: %s", err)
					return
				}
				logChan <- fmt.Sprintf("-> SENT: %s", req)
			case <-quit:
				return
			}
		}
	}()

	// Goroutine: User input
	go func() {
		reader := bufio.NewReader(os.Stdin)
		for {
			logChan <- "\nEnter RTSP command (OPTIONS, DESCRIBE, SETUP, PLAY):\n -> "
			text, _ := reader.ReadString('\n')
			text = strings.TrimSpace(text)
			if text == "exit" || text == "quit" {
				close(quit)
				os.Exit(0)
			}
			commands <- text
		}
	}()

	// Main loop: Read from RTSP stream
	buf := make([]byte, 4096)
	for {
		select {

		case <-quit:

			logChan <- "Exiting reader loop..."
			return
		default:
			n, err := rtspStream.Read(buf)
			if err != nil {
				logChan <- fmt.Sprintf("Read error: %s", err)
				return
			}
			if n > 0 {
				logChan <- fmt.Sprintf("\nReceived:\n%s\n", buf[:n])
				if sessionID == "" {
					sessionID = getSessionFromResponse(string(buf))
				}
			}
		}
	}
}

func getSessionFromResponse(res string) string {

	// update only once
	if sessionID != "" {
		return sessionID
	}
	if strings.Contains(res, "Session:") {
		for line := range strings.SplitSeq(res, "\r\n") {
			if strings.HasPrefix(line, "Session:") {
				parts := strings.Split(line, ":")
				if len(parts) > 1 {
					sessionID = strings.TrimSpace(strings.Split(parts[1], ";")[0])
					fmt.Println("Session ID captured:", sessionID)
				}
			}
		}
	}
	return sessionID
}
